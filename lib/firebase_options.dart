// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'config/local_config.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: LocalConfig.webApiKey,
    appId: LocalConfig.webAppId,
    messagingSenderId: LocalConfig.messagingSenderId,
    projectId: LocalConfig.projectId,
    authDomain: '${LocalConfig.projectId}.firebaseapp.com',
    storageBucket: '${LocalConfig.projectId}.appspot.com',
    measurementId: LocalConfig.measurementId,
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: LocalConfig.androidApiKey,
    appId: LocalConfig.androidAppId,
    messagingSenderId: LocalConfig.messagingSenderId,
    projectId: LocalConfig.projectId,
    storageBucket: '${LocalConfig.projectId}.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: LocalConfig.iosApiKey,
    appId: LocalConfig.iosAppId,
    messagingSenderId: LocalConfig.messagingSenderId,
    projectId: LocalConfig.projectId,
    storageBucket: '${LocalConfig.projectId}.appspot.com',
    iosBundleId: 'com.tilakpuli.budgetAi',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: LocalConfig.macosApiKey,
    appId: LocalConfig.macosAppId,
    messagingSenderId: LocalConfig.messagingSenderId,
    projectId: LocalConfig.projectId,
    storageBucket: '${LocalConfig.projectId}.appspot.com',
    iosBundleId: 'com.tilakpuli.budgetAi.RunnerTests',
  );
}
